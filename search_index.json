[
["index.html", "Supporting scripts: Finding a suitable library size to call variants in RNA-Seq 1 Aim of this document 1.1 Setup 1.2 Software used", " Supporting scripts: Finding a suitable library size to call variants in RNA-Seq Anna Quaglieri 1 Aim of this document This documentation contains the code to partially reproduce the results in the manuscript Finding a suitable library size to call variants in RNA-Seq, from the download of the raw sequenced files to variant calling. It also contains supplementary information regarding downsampling of the TCGA-LAML samples and the truth set used to compute sensitivity with this cohort. The example variant callset obtained with the Leucegene samples only contains published somatic variants(Lavallée et al. 2016). 1.1 Setup To run the workflow in the next sections, clone the repository below: git clone git@github.com:annaquaglieri16/Supporting-scripts-library-size-RNA-Seq.git cd ./Supporting-scripts-library-size-RNA-Seq The functions used for variant calling and downsampling are inside the ./functions folder. Chapter 2 contains the steps to download and run QC analyses on example files from the Leucegene cohort. The script ./functions/download-and-qc.sh contains only the scripts without comments. To follow the steps and settings used to align, call and create a standardised output of the variants, see Chapter 3. Once the examples files are downloaded and pre-processed it is possible to run the whole workflow by running the script ./functions/align-call-stand.sh, after appropriately setting input files and directory and downloading the required programs. Chapter 4 contains information about the proportions used to downsample the TCGA-LAML samples. 1.2 Software used R/3.5.2 Loaded on Unix sra-toolkit/2.8.1 fastqc/0.11.8 python/3.6.0 (for MultiQC) parallel STAR/2.5 sambamba/0.6.6 picard-tools/2.20.2 vardict/1.5.1 (loads R3.5.2) gatk/3.7.0 varscan/2.3.9 vcftools/0.1.13 samtools/1.6 ensembl-vep/89.0 vcflib/1.0.0-rc1 References "],
["ch-leucegene-down.html", "2 Download, quality control and downsample the Leucegene RNA-Seq samples 2.1 Download RNA-Seq data from GEO 2.2 Downsampling FASTQ files to a fixed number of reads", " 2 Download, quality control and downsample the Leucegene RNA-Seq samples 2.1 Download RNA-Seq data from GEO The initial unaligned RNA-Seq CBF-AML samples are downloaded from GEO using the accession numbers GSE49642, GSE52656, GSE62190, GSE66917, and GSE67039. Only 46 FASTQ files of samples whose mutations are reported in Supplemental Table 3 of (Lavallée et al. 2016) are kept for the analysis. Sample SRX381851 is removed due to low number of available reads. The file data/CBF_AML_samples.csv contains the sample names of the 46 samples used in the study. Below is an example using accession number GSE52656 where one of the CBF-AML samples is present, namely 07H099. 2.1.1 Get SRX sample names The GEOquery package can be used to extract SRX files linked to an accession number. # CRAN packages library(tidyverse) library(knitr) library(here) # Bioconductor packages if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;GEOquery&quot;,update = FALSE) ## ## The downloaded binary packages are in ## /var/folders/2b/9q8hw_092dg9d80pbmfjvndr00023z/T//Rtmpy6YArq/downloaded_packages library(GEOquery) Below the accession number GSE52656 is used as example. # Get matrix files for every accession number series_matrix_info &lt;- function(gse){ gsed &lt;- getGEO(gse,GSEMatrix=TRUE) gse.mat &lt;- pData(phenoData(gsed[[1]])) reduced &lt;- gse.mat[,c(&quot;title&quot;,&quot;geo_accession&quot;,&quot;relation.1&quot;)] write.csv(reduced,file.path(here(),&quot;data&quot;,paste(gse,&quot;_&quot;,nrow(gse.mat),&quot;.csv&quot;,sep=&quot;&quot;)),row.names = FALSE) } series_matrix_info(&quot;GSE62190&quot;) Every row in Table 2.1 contains sample names (title) and GSM numbers. In order to download a particular sample we need the SRA terms which are the names starting with: SRX*** in the relation.1 column. matrix_file &lt;- list.files(path = file.path(here(),&quot;data&quot;),pattern = &quot;GSE&quot;,full.names = TRUE) GSEmatrix &lt;- read_csv(matrix_file) kable(GSEmatrix[1:5,],caption=&quot;SRX sample names linked to the accession number GSE62190&quot;) Table 2.1: SRX sample names linked to the accession number GSE62190 title geo_accession relation.1 02H017 GSM1521543 SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX729552 06H152 GSM1521544 SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX729553 08H085 GSM1521545 SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX729554 08H129 GSM1521546 SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX729555 12H057 GSM1521547 SRA: https://www.ncbi.nlm.nih.gov/sra?term=SRX729556 With some string processing we can extract the SRX entries. GSEmatrix$SRX &lt;- stringr::str_extract(string = GSEmatrix$relation.1,pattern = &quot;SRX[0-9][0-9][0-9][0-9][0-9][0-9]&quot;) GSEmatrix$relation.1 &lt;- NULL kable(head(GSEmatrix)) title geo_accession SRX 02H017 GSM1521543 SRX729552 06H152 GSM1521544 SRX729553 08H085 GSM1521545 SRX729554 08H129 GSM1521546 SRX729555 12H057 GSM1521547 SRX729556 01H001 GSM1521548 SRX729557 The next chunk extracts only samples whose variants were published in (Lavallée et al. 2016). # CBF-AML Sample CBF_AML_info &lt;- read.csv(file.path(here(),&quot;data/CBF_AML_samples.csv&quot;)) cbf.samples &lt;- GSEmatrix[GSEmatrix$title %in% CBF_AML_info$title, ] 2.1.2 Create NCBI query search_ncbi &lt;- paste(cbf.samples$SRX,collapse=&quot; OR &quot;) search_ncbi ## [1] &quot;SRX729580 OR SRX729581 OR SRX729582 OR SRX729583 OR SRX729584 OR SRX729585 OR SRX729586 OR SRX729587 OR SRX729588 OR SRX729589 OR SRX729590 OR SRX729591 OR SRX729592 OR SRX729602 OR SRX729603 OR SRX729604 OR SRX729605 OR SRX729606 OR SRX729607 OR SRX729608 OR SRX729609 OR SRX729610 OR SRX729611 OR SRX729612 OR SRX729613 OR SRX729615 OR SRX729616 OR SRX729617 OR SRX729618 OR SRX729619 OR SRX729620 OR SRX729621 OR SRX729622 OR SRX729623 OR SRX729624 OR SRX729625 OR SRX729626 OR SRX729627 OR SRX729628 OR SRX729629 OR SRX729630 OR SRX729631 OR SRX729632 OR SRX729633&quot; The search SRX729580 OR SRX729581 OR SRX729582 OR SRX729583 OR SRX729584 OR SRX729585 OR SRX729586 OR SRX729587 OR SRX729588 OR SRX729589 OR SRX729590 OR SRX729591 OR SRX729592 OR SRX729602 OR SRX729603 OR SRX729604 OR SRX729605 OR SRX729606 OR SRX729607 OR SRX729608 OR SRX729609 OR SRX729610 OR SRX729611 OR SRX729612 OR SRX729613 OR SRX729615 OR SRX729616 OR SRX729617 OR SRX729618 OR SRX729619 OR SRX729620 OR SRX729621 OR SRX729622 OR SRX729623 OR SRX729624 OR SRX729625 OR SRX729626 OR SRX729627 OR SRX729628 OR SRX729629 OR SRX729630 OR SRX729631 OR SRX729632 OR SRX729633 can be pasted into NCBI https://www.ncbi.nlm.nih.gov/sra and by following the intructions in https://www.ncbi.nlm.nih.gov/sra/docs/sradownload/#download-sequence-data-files-usi Download sequence data files using SRA Toolkit one can download all the SRR run names and information of the runs. Sample SRX729580 is used as example here and it was run across different lanes whose samples are listed in ./data/SraAccList.txt. Six .sra sampels are downloaded with prefetch with the code below that can be run a Unix terminal from the repository directory. module load sra-toolkit/2.8.1 # Run in a unix terminal in the repository directory # The sra files are downloaded in your home directory under ~/ncbi/public/sra prefetch --option-file ./data/SraAccList.txt The SRA files are then converted to FASTQ files with fastq-dump --split-files using fastqc/0.11.8. The sra files are downloaded by default into your home directory under ~/ncbi/public/sra. In the example below I converted the sra to fastq with fastq-dump, performed quality control with fastqc and the FASTQ files to ./data/test-fastq. module load fastqc/0.11.8 module load python/3.6.0 # for MultiQC module load parallel # Run in a unix terminal # Convert to Fastq fastq-dump --split-files path_to_sra_files/* # Move fastq files in repository directory mkdir ./data/fastq-files mv path_to_sra_files/*fastq ./data/fastq-files # Multiqc to check quality of files find ./data/fastq-files -name &quot;SRR*.fastq&quot; &gt; ./data/fastq_files.txt cat ./data/fastq_files.txt | parallel -j 10 &quot;fastqc {}&quot; # Combine fastqc output and check quality in the html file multiqc ./data/fastq-files/ --interactive -n &quot;files-downloaded&quot; -o ./data/fastq-files/ # Move fastqc output into a different directory mkdir ./data/fastqc/ mv ./data/fastq-files/*html ./data/fastqc/ mv ./data/fastq-files/*zip ./data/fastqc/ 2.2 Downsampling FASTQ files to a fixed number of reads Each sample was sequenced over multiple lanes and the FASTQ files for one sample were first concatenated and then downsampled. In the example below only the the FASTQ files whose samples are defined in the second argument (./data/sample-to-merge.txt) are combined. The function needs to be run in the directory where the files are saved. cd ./data/fastq-files python ../../functions/combined_fastqs.py ../match-SRX-SRR.txt ../sample-to-merge.txt fastqc SRX729580_combined_1.fastq fastqc SRX729580_combined_2.fastq multiqc . --interactive -n &quot;files-downloaded-merged&quot; -o . The seqtk tool was then used to downsample an exact number of reads from paired end (PE) FASTQ files. In the code below we downsample the fastq file to 30M fragments and perform QC to check the final number of reads in each file. path-to-seqtk-folder/seqtk sample -s100 SRX729580_combined_1.fastq 30000000 &gt; sub30M_SRX729580_combined_1.fastq path-to-seqtk-folder/seqtk sample -s100 SRX729580_combined_2.fastq 30000000 &gt; sub30M_SRX729580_combined_2.fastq # Check that the downsampled samples have the correct size and that the downsampling didn&#39;t corrupt the files fastqc sub30M_SRX729580_combined_1.fastq fastqc sub30M_SRX729580_combined_2.fastq multiqc . --interactive -n &quot;files-downsampled&quot; -o . References "],
["ch-acs.html", "3 Align, call and standardise 3.1 Alignement, Read Groups, Mark duplicates 3.2 GATK pre-processing to call variants with MuTect and VarScan 3.3 Variant calling 3.4 Standardise variants output", " 3 Align, call and standardise 3.1 Alignement, Read Groups, Mark duplicates The FASTQ are aligned with STAR. The index needed for STAR is created using the functions below after downloading the UCSC hg19 fasta reference genome and GTF file from iGenomes. For the index, STAR requires an extra parameter called sjdbOverhang which is usually set to be (read length - 1) epends on the read length used for sequencing, in this case 100bp - 1. 3.1.1 STAR index module load STAR/2.5 module load R/3.5.2 # Iniaitlise Genome directory where to save STAR Index and STAR Fusion Index folders # 99 = read length - 1 as suggested in STAR manual star_genome100=path_to_genome_directory/star_index_hg19_99 genome=reference_genome_hg19.fasta gtf=gtf_hg19.gtf mkdir -p ${star_genome100} STAR \\ --runMode genomeGenerate \\ --genomeDir ${star_genome100} \\ --genomeFastaFiles ${genome} \\ --sjdbOverhang 99 \\ --sjdbGTFfile ${gtf} From this point onwards the script ./functions/align-call-stand.sh can be setup with the correct file paths and run. 3.1.2 STAR-1pass The 45 FASTQ files were aligned using STAR in two pass mode. First all samples are aligned in the first pass using the example function below, a wrapper function that calls STAR. The example is provided for one sample. module load STAR/2.5 module load R/3.5.2 cd path_to_repository/ star_genome100=path_to_genome_directory/star_index_hg19_99 # compress fastq file pigz ./data/fastq-files/sub*combined*.fastq FQ1=./data/fastq-files/sub30M_SRX729580_combined_1.fastq.gz FQ2=./data/fastq-files/sub30M_SRX729580_combined_2.fastq.gz bamout=SRX729580 mkdir ./data/fastq-files/star-pass1 Rscript ./functions/run_STAR.R \\ --genome_index ${star_genome100} \\ --fastqfiles $FQ1,$FQ2 \\ --sampleName SRX729580 \\ --RlibPath &quot;path_to_R/3.4&quot; \\ --outdir ./data/fastq-files/star-pass1 --STARmode &quot;1Pass&quot; # Check alignment stats multiqc ./data/fastq-files/star-pass1 --interactive -n &quot;star1pass&quot; -o ./data/fastq-files/star-pass1 The R function above is a wrapper for the STAR call with settings below: # Version STAR/2.5 STAR --genomeDir $star_genome100 \\ --readFilesIn $FQ1 $FQ2 \\ --runThreadN 27 \\ --chimSegmentMin 10 \\ --readFilesCommand zcat \\ --alignSJoverhangMin 8 \\ --outBAMcompression 10 \\ --alignSJDBoverhangMin 1 \\ --limitBAMsortRAM 85741557872 \\ --outFilterMismatchNmax 999 \\ --alignIntronMin 20 \\ --alignIntronMax 200000 \\ --alignMatesGapMax 20000 \\ --outFileNamePrefix ./data/fastq-files/star-pass1/SRX729580 \\ --outSAMtype BAM SortedByCoordinate \\ --outFilterType BySJout \\ --outFilterMultimapNmax 15 After running STAR on all the fastq files available the splice junctions are collected from the first pass and use them for the second pass. # concatenate splice junctions from all samples from ran in pass1 cat ./data/fastq-files/star-pass1/*SJ.out.tab &gt; ./data/fastq-files/star-pass1/combined_sj.out.tab # Dobin suggests to remove chrm cause they are usually False positives awk &#39;!/chrM/&#39; ./data/fastq-files/tar-pass1/combined_sj.out.tab &gt; ./data/fastq-files/star-pass1/combined_sj_nochrM.out.tab 3.1.3 STAR-2pass The STAR call aligns and sorts reads by coordinate. module load STAR/2.5 module load R/3.5.2 star_genome100=path_to_genome_directory/star_index_hg19_99 FQ1=./data/fastq-files/sub30M_SRX729580_combined_1.fastq.gz FQ2=./data/fastq-files/sub30M_SRX729580_combined_2.fastq.gz mkdir ./data/fastq-files/star-pass2 Rscript ./functions/run_STAR.R \\ --genome_index $star_genome100 \\ --fastqfiles $FQ1,$FQ2 \\ --sampleName SRX729580 \\ --RlibPath &quot;path_to_R/3.4&quot; \\ --outdir ./data/fastq-files/star-pass2 --STARmode &quot;2PassMulti&quot; \\ --sjfile ./data/fastq-files/star-pass1/combined_sj_nochrM.out.tab # Check alignment stats multiqc ./data/fastq-files/star-pass1 --interactive -n &quot;star2pass&quot; -o ./data/fastq-files/star-pass2 The function above is a wrapper for the STAR call used in the first pass with the additinal settings below: --outFilterScoreMinOverLread 0.3 \\ --chimSegmentReadGapMax 6 \\ --alignSJstitchMismatchNmax 5 -1 5 5 \\ --chimOutType WithinBAM \\ --chimJunctionOverhangMin 2 \\ --limitSjdbInsertNsj 2273673 \\ --sjdbFileChrStartEnd data/test-fastq/star-pass1/combined_sj_nochrM.out.tab 3.1.4 Processing post alignment These include: Mark PCR duplicates, sambamba markdup from sambamba/0.6.6 was used. Add Read Groups using AddOrReplaceReadGroups (from picard-tools/2.9.4). Read groups are required by GATK. If a sample was sequenced across different lanes lane-specific read groups are required for each separate bamfile (e.g. SampleName_L1, SampleName_L2). This sample name will be used for the fields RGLB and RGSM in the AddOrReplaceReadGroups example below. module load picard-tools/2.9.4 # Picard tool function to add read groups to a bamfile AddOrReplaceReadGroups \\ I=./data/fastq-files/star-pass2/SRX729580Aligned.sortedByCoord.out.bam \\ O=./data/fastq-files/star-pass2/SRX729580Aligned.sortedByCoord.out.RG.bam \\ RGID=SRX729580 \\ RGPU=SRX729580 \\ RGLB=SRX729580_L1 \\ RGPL=&quot;illumina&quot; \\ RGSM=SRX729580_L1 ValidateSamFile (from picard-tools/2.9.4) can be used to check for errors in the final bamfile. sambamba index to index the final bamfile. module load sambamba/0.6.6 sambamba index data/test-fastq/star-pass2/SRX729580Aligned.sortedByCoord.out.RG.bam 3.2 GATK pre-processing to call variants with MuTect and VarScan The function ./functions/gatk_process_pipe.R performs the following steps required by GATK3 to run MuTect2: SplitNCigarReads see GATK documentation Base recalibration see GATK documentation. These steps are suggested in the GATK best practices for RNA-Seq variant calling. Below is an example call which wraps the steps above and check if output files have already been created. module load gatk/3.7.0 module load sambamba/0.6.6 module load R/3.5.2 genome_fasta=reference_genome_hg19.fasta Rscript ./functions/gatk_process_pipe.R \\ --reference_fasta $genome_fasta \\ --bamfile data/test-fastq/star-pass2/SRX729580Aligned.sortedByCoord.out.RG.bam \\ --sampleName SRX729580 \\ --knownSites1 path_to_GATK_Bundle_files/dbsnp_138.hg19.excluding_sites_after_129.vcf \\ --knownSites2 path_to_GATK_Bundle_files/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf \\ --knownSites3 path_to_GATK_Bundle_files/1000G_phase1.indels.hg19.sites.vcf The function above is a wrapper for the following GATK3 calls. 3.2.1 SplitNCigarReads gatk -T SplitNCigarReads -R path_to_genome.fa \\ -I data/test-fastq/star-pass2/SRX729580Aligned.sortedByCoord.out.RG.bam \\ -o data/test-fastq/star-pass2/SRX729580Aligned.reorderedDupl.rg.split.bam \\ --filter_mismatching_base_and_quals -U ALLOW_N_CIGAR_READS -rf ReassignOneMappingQuality -RMQF 255 -RMQT 60 \\ --log_to_file data/test-fastq/star-pass2/SRX729580_RG_DUPL_SPLIT_log 3.2.2 Base recalibration Base recalibration using known sites downloaded from the GATK Bundle. More information about base recalibration can be found on GATK website. module load gatk/3.7.0 gatk -T BaseRecalibrator -R path_to_genome.fa \\ -I data/test-fastq/star-pass2/SRX729580Aligned.reorderedDupl.rg.split.bam -nct 8 \\ -knownSites path_to_GATK_Bundle_files/dbsnp_138.hg19.excluding_sites_after_129.vcf \\ -knownSites path_to_GATK_Bundle_files/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf \\ -knownSites path_to_GATK_Bundle_files/1000G_phase1.indels.hg19.sites.vcf \\ -o data/test-fastq/star-pass2/BaseQRecal/SRX729580/SRX729580_recal_data.table \\ --log_to_file data/test-fastq/star-pass2/BaseQRecal/SRX729580/SRX729580_recal_step1_log gatk -T BaseRecalibrator -R path_hg19_reference/genome.fa \\ -I data/test-fastq/star-pass2/SRX729580Aligned.reorderedDupl.rg.split.bam -nct 8 \\ -knownSites path_to_GATK_Bundle_files/dbsnp_138.hg19.excluding_sites_after_129.vcf \\ -knownSites path_to_GATK_Bundle_files/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf \\ -knownSites path_to_GATK_Bundle_files/1000G_phase1.indels.hg19.sites.vcf \\ -BQSR data/test-fastq/star-pass2/BaseQRecal/SRX729580/SampleName_recal_data.table \\ -o data/test-fastq/star-pass2/BaseQRecal/SRX729580/SRX729580_post_recal_data.table \\ --log_to_file data/test-fastq/star-pass2/BaseQRecal/SRX729580/SRX729580_recal_step2_log gatk -T AnalyzeCovariates -R path_hg19_reference/genome.fa \\ -before data/test-fastq/star-pass2/BaseQRecal/SRX729580/SSRX729580_recal_data.table \\ -after data/test-fastq/star-pass2/BaseQRecal/SRX729580/SRX729580_post_recal_data.table \\ -csv data/test-fastq/star-pass2/BaseQRecal/SRX729580/SSRX729580_recalibration_plots.csv \\ -plots data/test-fastq/star-pass2/BaseQRecal/SRX729580/SRX729580_recalibration_plots.pdf \\ --log_to_file data/test-fastq/star-pass2/BaseQRecal/SRX729580/SRX729580_recal_analyseCov_log gatk -T PrintReads -R path_hg19_reference/genome.fa \\ -I data/test-fastq/star-pass2/SRX729580Aligned.reorderedDupl.rg.split.bam \\ -o data/test-fastq/star-pass2/SRX729580Recal.reorderedDupl.rg.split.bam \\ -nct 8 -BQSR data/test-fastq/star-pass2/BaseQRecal/SRX729580/SRX729580_post_recal_data.table \\ --log_to_file data/test-fastq/star-pass2/BaseQRecal/SRX729580/SRX729580_Log_recalibrated_bases MultiQC was used to create summary after running pre-processing with GATK https://multiqc.info/docs/#gatk. 3.3 Variant calling Variants are called on regions of interest corresponding to the gene bodies of the genes whose variants are reported in Supplemental Table 3 of (Lavallée et al. 2016). The bed file with genomic regions is ./data/target_regions.bed. Variants are called with MuTect2, VarScan and VarDict in tumour-only mode and annotated using the Variant Effect Preditor (VEP). The directory needed for variant calling with VarDict (path_to_vardict/VarDict) was downloaded from VarDict GitHub page https://github.com/AstraZeneca-NGS/VarDict. The ./functions/call_variants.R function is a wrapper to call and annotate variants with the callers listed above. module load R/3.5.2 # needed for vardict module load vardict/1.5.1 module load vcftools/0.1.13 # needed for variant parsing module load ensembl-vep/89.0 # Vardict tumour-only call Rscript ./functions/call_variants.R \\ --reference_fasta path_hg19_reference/genome.fa \\ --bamfile data/test-fastq/star-pass2/SRX729580Aligned.sortedByCoord.out.RG.split.bam \\ --sampleName SRX729580 \\ --regions ./data/target_regions.bed \\ --genome_assembly &#39;GRCh37&#39; \\ --VarDict_dir path_to_vardict_directory \\ --caller vardict \\ --outputdir_suffix &quot;caller_defaults&quot; \\ --VEPcall &#39;vep --dir_cache path_to_vep_cache/.vep --offline&#39; \\ --output_directory ./results/ # VarScan tumour-only call module load R/3.5.2 module load varscan/2.3.9 module load vcftools/0.1.13 # needed for variant parsing module load ensembl-vep/89.0 Rscript ./functions/call_variants.R \\ --reference_fasta path_to_genome.fa \\ --bamfile data/test-fastq/star-pass2/SRX729580Recal.reorderedDupl.rg.split.bam \\ --sampleName SRX729580 \\ --regions ./data/target_regions.bed \\ --genome_assembly &#39;GRCh37&#39; \\ --caller varscan \\ --outputdir_suffix &quot;caller_defaults&quot; \\ --VEPcall &#39;vep --dir_cache path_to_vep_cache/.vep --offline&#39; \\ --output_directory ./results/ # MuTect tumour-only call module load R/3.5.2 module load gatk/3.7.0 module load vcftools/0.1.13 module load ensembl-vep/89.0 Rscript ./functions/call_variants.R \\ --reference_fasta path_to_genome.fa \\ --bamfile data/test-fastq/star-pass2/SRX729580Recal.reorderedDupl.rg.split.bam \\ --sampleName SRX729580 \\ --regions ./data/target_regions.bed \\ --genome_assembly &#39;GRCh37&#39; \\ --caller mutect \\ --outputdir_suffix &quot;caller_defaults&quot; \\ --VEPcall &#39;vep --dir_cache path_to_vep_cache/.vep --offline&#39; \\ --output_directory ./results/ The calls using the function above are wrappers for the calls done by each caller using the settings below. 3.3.1 MuTect2 settings gatk -T MuTect2 -R path_to_genome.fa \\ -I:tumor data/test-fastq/star-pass2/SRX729580Recal.reorderedDupl.rg.split.bam \\ -L ./data/target_regions.bed \\ -o ./results/mutect/regions_caller_defaults/SRX729580_germline_snvs_indels.vcf \\ -log ./results/mutect/regions_caller_defaults/SRX729580_germline_snvs_indels_log 3.3.2 Samtools + VarScan2 settings samtools mpileup --output-tags AD,ADF,ADR,DP,SP \\ --fasta-ref path_to_genome.fa \\ -l ./data/target_regions.bed data/test-fastq/star-pass2/SSRX729580Aligned.sortedByCoord.out.RG.split.recalibrated.bam | varscan mpileup2cns --variants 1 --output-vcf 1 --min-var-freq 0.01 &gt; ./results/varscan/regions_caller_defaults/SSRX729580_germline_snvs_indels.vcf 2&gt; ./results/varscan/regions_caller_defaults/SSRX729580_germline_snvs_indels_log 3.3.3 VarDict settings vardict -f 0.05 -c 1 -S 2 -E 3 -g 4 -r 2 -t -th 10 -v -G path_to_genome.fa \\ -b data/test-fastq/star-pass2/SRX729580Aligned.sortedByCoord.out.RG.split.bam ./data/target_regions.bed | vardict_dir/teststrandbias.R | vardict_dir/var2vcf_valid.pl -N -E -f 0.05 &gt; ./results/vardict/regions_default-settings/SSRX729580_germline_snvs_indels.vcf 3.3.4 VEP settings module load ensembl-vep/89.0 vep --dir_cache dir_to_VEP_cache/.vep --offline \\ -i ./results/vardict/regions_default-settings/SSRX729580_germline_snvs_indels.vcf \\ -o ./results/vardict/regions_default-settings/annotated_variants/SSRX729580_germline_annotated.vcf \\ --cache --everything --force_overwrite --assembly GRCh37 --fork 12 --vcf --port 3337 3.4 Standardise variants output The function Rscript ./functions/call_variants.R will return as output variants in a standardised format so that they can be easily compared across callers. This means that fields of interest, like variant allele frequency and depth at a variant site, which are usually provided in with different names across callers, are returned with the same names. The standardised variants are returned as .txt files. The functions in call_variants.R aimed at standardising variants are also the same ones present in the varikondo(Quaglieri and Flensburg, n.d.) R package available on github. Examples on how to use its functions are provided in the package website https://annaquaglieri16.github.io/varikondo/articles/vignette.html and below. The earlier version of the functions returns some duplicated rows compared to using varikondo but this won’t affect the results of the study as we only looked at unique variants. The .txt files SRX729580_germline_final.txt produced for each caller are used for sensitivity analysis and they are processed as discussed in the Methods paper. In the example below we only report one somatic mutations found on KIT. # devtools::install_github(&quot;annaquaglieri16/varikondo&quot;) # detach(&quot;package:varikondo&quot;) library(varikondo) utils::packageVersion(&quot;varikondo&quot;) ## [1] &#39;0.11.8&#39; library(here) # Variant file created with ./functions/call_variants.R mutect.table &lt;- read.delim(file.path(here(),&quot;data/test-variants/mutect/regions_caller_defaults/annotated_variants/SRX729580_germline_final.txt&quot;),sep = &quot;\\t&quot;) dim(mutect.table) ## [1] 3 82 knitr::kable(mutect.table) Location caller chrom pos ref alt qual filter genotype tot_depth VAF ref_depth alt_depth ref_forw ref_rev alt_forw alt_rev Allele Consequence IMPACT SYMBOL Gene Feature_type Feature BIOTYPE EXON INTRON HGVSc HGVSp cDNA_position CDS_position Protein_position Amino_acids Codons Existing_variation DISTANCE STRAND FLAGS VARIANT_CLASS SYMBOL_SOURCE HGNC_ID CANONICAL TSL APPRIS CCDS ENSP SWISSPROT TREMBL UNIPARC GENE_PHENO SIFT PolyPhen DOMAINS AF AFR_AF AMR_AF EAS_AF EUR_AF SAS_AF AA_AF EA_AF ExAC_AF ExAC_Adj_AF ExAC_AFR_AF ExAC_AMR_AF ExAC_EAS_AF ExAC_FIN_AF ExAC_NFE_AF ExAC_OTH_AF ExAC_SAS_AF MAX_AF MAX_AF_POPS CLIN_SIG SOMATIC PHENO PUBMED MOTIF_NAME MOTIF_POS HIGH_INF_POS MOTIF_SCORE_CHANGE SampleName IMPACT_rank chr4_55599321 mutect2 chr4 55599321 A TRUE 30.79505 clustered_events A/T 160 0.071 148 12 77 71 11 1 TRUE missense_variant MODERATE KIT ENSG00000157404 Transcript ENST00000288135 protein_coding 17/21 NA NA NA 2544 2447 816 D/V gAc/gTc rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 NA 1 NA SNV HGNC 6342 YES NA NA CCDS3496.1 ENSP00000288135 P10721 Q8TCG9 UPI000003F17D 1 deleterious(0) probably_damaging(0.977) PROSITE_profiles:PS50011&amp;hmmpanther:PTHR24416&amp;hmmpanther:PTHR24416:SF46&amp;Pfam_domain:PF07714&amp;Gene3D:1.10.510.10&amp;PIRSF_domain:PIRSF000615&amp;SMART_domains:SM00219&amp;PIRSF_domain:PIRSF500951&amp;Superfamily_domains:SSF56112 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 NA NA NA NA NA SRX729580 3 chr4_55599321 mutect2 chr4 55599321 A TRUE 30.79505 clustered_events A/T 160 0.071 148 12 77 71 11 1 TRUE missense_variant MODERATE KIT ENSG00000157404 Transcript ENST00000412167 protein_coding 17/21 NA NA NA 2532 2435 812 D/V gAc/gTc rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 NA 1 NA SNV HGNC 6342 NA NA CCDS47058.1 ENSP00000390987 P10721 Q8TCG9 UPI000006D0DC 1 deleterious(0) probably_damaging(0.961) PROSITE_profiles:PS50011&amp;hmmpanther:PTHR24416:SF46&amp;hmmpanther:PTHR24416&amp;Gene3D:1.10.510.10&amp;Pfam_domain:PF07714&amp;SMART_domains:SM00219&amp;PIRSF_domain:PIRSF000615&amp;PIRSF_domain:PIRSF500951&amp;Superfamily_domains:SSF56112 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 NA NA NA NA NA SRX729580 3 chr4_55599321 mutect2 chr4 55599321 A TRUE 30.79505 clustered_events A/T 160 0.071 148 12 77 71 11 1 TRUE non_coding_transcript_exon_variant MODIFIER KIT ENSG00000157404 Transcript ENST00000512959 retained_intron 4/4 NA NA NA 500 NA NA rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 NA 1 NA SNV HGNC 6342 NA NA 1 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 NA NA NA NA NA SRX729580 4 # Read and parse with varikondo mutect.varik &lt;- varikondo::parse_vcf_output(file.path(here(),&quot;data/test-variants/mutect/regions_caller_defaults/annotated_variants/SRX729580_germline_annotated.vcf&quot;), caller = &quot;mutect&quot;,vep=TRUE) dim(mutect.varik) ## [1] 3 87 knitr::kable(mutect.varik) Location caller chrom pos end ref alt qual filter genotype tot_depth VAF ref_depth alt_depth ref_forw ref_rev alt_forw alt_rev start width ref_base_quality alt_base_quality SampleName Allele Consequence IMPACT SYMBOL Gene Feature_type Feature BIOTYPE EXON INTRON HGVSc HGVSp cDNA_position CDS_position Protein_position Amino_acids Codons Existing_variation DISTANCE STRAND FLAGS VARIANT_CLASS SYMBOL_SOURCE HGNC_ID CANONICAL TSL APPRIS CCDS ENSP SWISSPROT TREMBL UNIPARC GENE_PHENO SIFT PolyPhen DOMAINS AF AFR_AF AMR_AF EAS_AF EUR_AF SAS_AF AA_AF EA_AF ExAC_AF ExAC_Adj_AF ExAC_AFR_AF ExAC_AMR_AF ExAC_EAS_AF ExAC_FIN_AF ExAC_NFE_AF ExAC_OTH_AF ExAC_SAS_AF MAX_AF MAX_AF_POPS CLIN_SIG SOMATIC PHENO PUBMED MOTIF_NAME MOTIF_POS HIGH_INF_POS MOTIF_SCORE_CHANGE IMPACT_rank chr4_55599321 mutect chr4 55599321 55599321 A T 46.17342 clustered_events 0/1 160 0.071 148 12 77 71 11 1 55599321 1 4552 370 SRX729580_germline_annotated.vcf.bgz T missense_variant MODERATE KIT ENSG00000157404 Transcript ENST00000288135 protein_coding 17/21 2544 2447 816 D/V gAc/gTc rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 1 SNV HGNC 6342 YES CCDS3496.1 ENSP00000288135 P10721 Q8TCG9 UPI000003F17D 1 deleterious(0) probably_damaging(0.977) PROSITE_profiles:PS50011&amp;hmmpanther:PTHR24416&amp;hmmpanther:PTHR24416:SF46&amp;Pfam_domain:PF07714&amp;Gene3D:1.10.510.10&amp;PIRSF_domain:PIRSF000615&amp;SMART_domains:SM00219&amp;PIRSF_domain:PIRSF500951&amp;Superfamily_domains:SSF56112 pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 3 chr4_55599321 mutect chr4 55599321 55599321 A T 46.17342 clustered_events 0/1 160 0.071 148 12 77 71 11 1 55599321 1 4552 370 SRX729580_germline_annotated.vcf.bgz T missense_variant MODERATE KIT ENSG00000157404 Transcript ENST00000412167 protein_coding 17/21 2532 2435 812 D/V gAc/gTc rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 1 SNV HGNC 6342 CCDS47058.1 ENSP00000390987 P10721 Q8TCG9 UPI000006D0DC 1 deleterious(0) probably_damaging(0.961) PROSITE_profiles:PS50011&amp;hmmpanther:PTHR24416:SF46&amp;hmmpanther:PTHR24416&amp;Gene3D:1.10.510.10&amp;Pfam_domain:PF07714&amp;SMART_domains:SM00219&amp;PIRSF_domain:PIRSF000615&amp;PIRSF_domain:PIRSF500951&amp;Superfamily_domains:SSF56112 pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 3 chr4_55599321 mutect chr4 55599321 55599321 A T 46.17342 clustered_events 0/1 160 0.071 148 12 77 71 11 1 55599321 1 4552 370 SRX729580_germline_annotated.vcf.bgz T non_coding_transcript_exon_variant MODIFIER KIT ENSG00000157404 Transcript ENST00000512959 retained_intron 4/4 500 rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 1 SNV HGNC 6342 1 pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 1 # Variant file created with ./functions/call_variants.R varscan.table &lt;- read.delim(file.path(here(),&quot;data/test-variants/varscan/regions_caller_defaults/annotated_variants/SRX729580_germline_final.txt&quot;),sep = &quot;\\t&quot;) dim(varscan.table) ## [1] 3 82 knitr::kable(varscan.table) Location caller chrom pos ref alt qual filter genotype tot_depth VAF ref_depth alt_depth ref_forw ref_rev alt_forw alt_rev Allele Consequence IMPACT SYMBOL Gene Feature_type Feature BIOTYPE EXON INTRON HGVSc HGVSp cDNA_position CDS_position Protein_position Amino_acids Codons Existing_variation DISTANCE STRAND FLAGS VARIANT_CLASS SYMBOL_SOURCE HGNC_ID CANONICAL TSL APPRIS CCDS ENSP SWISSPROT TREMBL UNIPARC GENE_PHENO SIFT PolyPhen DOMAINS AF AFR_AF AMR_AF EAS_AF EUR_AF SAS_AF AA_AF EA_AF ExAC_AF ExAC_Adj_AF ExAC_AFR_AF ExAC_AMR_AF ExAC_EAS_AF ExAC_FIN_AF ExAC_NFE_AF ExAC_OTH_AF ExAC_SAS_AF MAX_AF MAX_AF_POPS CLIN_SIG SOMATIC PHENO PUBMED MOTIF_NAME MOTIF_POS HIGH_INF_POS MOTIF_SCORE_CHANGE SampleName IMPACT_rank chr4_55599321 varscan chr4 55599321 A TRUE 30.5 PASS A/T 157 0.0764 145 12 71 74 5 7 TRUE missense_variant MODERATE KIT ENSG00000157404 Transcript ENST00000288135 protein_coding 17/21 NA NA NA 2544 2447 816 D/V gAc/gTc rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 NA 1 NA SNV HGNC 6342 YES NA NA CCDS3496.1 ENSP00000288135 P10721 Q8TCG9 UPI000003F17D 1 deleterious(0) probably_damaging(0.977) PROSITE_profiles:PS50011&amp;hmmpanther:PTHR24416&amp;hmmpanther:PTHR24416:SF46&amp;Pfam_domain:PF07714&amp;Gene3D:1.10.510.10&amp;PIRSF_domain:PIRSF000615&amp;SMART_domains:SM00219&amp;PIRSF_domain:PIRSF500951&amp;Superfamily_domains:SSF56112 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 NA NA NA NA NA SRX729580 3 chr4_55599321 varscan chr4 55599321 A TRUE 30.5 PASS A/T 157 0.0764 145 12 71 74 5 7 TRUE missense_variant MODERATE KIT ENSG00000157404 Transcript ENST00000412167 protein_coding 17/21 NA NA NA 2532 2435 812 D/V gAc/gTc rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 NA 1 NA SNV HGNC 6342 NA NA CCDS47058.1 ENSP00000390987 P10721 Q8TCG9 UPI000006D0DC 1 deleterious(0) probably_damaging(0.961) PROSITE_profiles:PS50011&amp;hmmpanther:PTHR24416:SF46&amp;hmmpanther:PTHR24416&amp;Gene3D:1.10.510.10&amp;Pfam_domain:PF07714&amp;SMART_domains:SM00219&amp;PIRSF_domain:PIRSF000615&amp;PIRSF_domain:PIRSF500951&amp;Superfamily_domains:SSF56112 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 NA NA NA NA NA SRX729580 3 chr4_55599321 varscan chr4 55599321 A TRUE 30.5 PASS A/T 157 0.0764 145 12 71 74 5 7 TRUE non_coding_transcript_exon_variant MODIFIER KIT ENSG00000157404 Transcript ENST00000512959 retained_intron 4/4 NA NA NA 500 NA NA rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 NA 1 NA SNV HGNC 6342 NA NA 1 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 NA NA NA NA NA SRX729580 4 # Read and parse with varikondo varscan.varik &lt;- varikondo::parse_vcf_output(file.path(here(),&quot;data/test-variants/varscan/regions_caller_defaults/annotated_variants/SRX729580_germline_annotated.vcf&quot;), caller = &quot;varscan&quot;,vep = TRUE) dim(varscan.varik) ## [1] 3 87 knitr::kable(varscan.varik) Location caller chrom pos end ref alt qual filter genotype tot_depth VAF ref_depth alt_depth ref_forw ref_rev alt_forw alt_rev start width ref_base_quality alt_base_quality SampleName Allele Consequence IMPACT SYMBOL Gene Feature_type Feature BIOTYPE EXON INTRON HGVSc HGVSp cDNA_position CDS_position Protein_position Amino_acids Codons Existing_variation DISTANCE STRAND FLAGS VARIANT_CLASS SYMBOL_SOURCE HGNC_ID CANONICAL TSL APPRIS CCDS ENSP SWISSPROT TREMBL UNIPARC GENE_PHENO SIFT PolyPhen DOMAINS AF AFR_AF AMR_AF EAS_AF EUR_AF SAS_AF AA_AF EA_AF ExAC_AF ExAC_Adj_AF ExAC_AFR_AF ExAC_AMR_AF ExAC_EAS_AF ExAC_FIN_AF ExAC_NFE_AF ExAC_OTH_AF ExAC_SAS_AF MAX_AF MAX_AF_POPS CLIN_SIG SOMATIC PHENO PUBMED MOTIF_NAME MOTIF_POS HIGH_INF_POS MOTIF_SCORE_CHANGE IMPACT_rank chr4_55599321 varscan chr4 55599321 55599321 A T 30.5 PASS 0/1 157 0.0764 145 12 71 74 5 7 55599321 1 31 30 SRX729580_germline_annotated.vcf.bgz T missense_variant MODERATE KIT ENSG00000157404 Transcript ENST00000288135 protein_coding 17/21 2544 2447 816 D/V gAc/gTc rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 1 SNV HGNC 6342 YES CCDS3496.1 ENSP00000288135 P10721 Q8TCG9 UPI000003F17D 1 deleterious(0) probably_damaging(0.977) PROSITE_profiles:PS50011&amp;hmmpanther:PTHR24416&amp;hmmpanther:PTHR24416:SF46&amp;Pfam_domain:PF07714&amp;Gene3D:1.10.510.10&amp;PIRSF_domain:PIRSF000615&amp;SMART_domains:SM00219&amp;PIRSF_domain:PIRSF500951&amp;Superfamily_domains:SSF56112 pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 3 chr4_55599321 varscan chr4 55599321 55599321 A T 30.5 PASS 0/1 157 0.0764 145 12 71 74 5 7 55599321 1 31 30 SRX729580_germline_annotated.vcf.bgz T missense_variant MODERATE KIT ENSG00000157404 Transcript ENST00000412167 protein_coding 17/21 2532 2435 812 D/V gAc/gTc rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 1 SNV HGNC 6342 CCDS47058.1 ENSP00000390987 P10721 Q8TCG9 UPI000006D0DC 1 deleterious(0) probably_damaging(0.961) PROSITE_profiles:PS50011&amp;hmmpanther:PTHR24416:SF46&amp;hmmpanther:PTHR24416&amp;Gene3D:1.10.510.10&amp;Pfam_domain:PF07714&amp;SMART_domains:SM00219&amp;PIRSF_domain:PIRSF000615&amp;PIRSF_domain:PIRSF500951&amp;Superfamily_domains:SSF56112 pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 3 chr4_55599321 varscan chr4 55599321 55599321 A T 30.5 PASS 0/1 157 0.0764 145 12 71 74 5 7 55599321 1 31 30 SRX729580_germline_annotated.vcf.bgz T non_coding_transcript_exon_variant MODIFIER KIT ENSG00000157404 Transcript ENST00000512959 retained_intron 4/4 500 rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 1 SNV HGNC 6342 1 pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 1 # VarDict file created with ./functions/call_variants.R vardict.table &lt;- read.delim(file.path(here(),&quot;data/test-variants/vardict/regions_caller_defaults/annotated_variants/SRX729580_germline_final.txt&quot;),sep = &quot;\\t&quot;) knitr::kable(vardict.table) Location caller chrom pos ref alt qual filter genotype tot_depth VAF ADJVAF_ADJ_indels ref_depth alt_depth ref_forw ref_rev alt_forw alt_rev Allele Consequence IMPACT SYMBOL Gene Feature_type Feature BIOTYPE EXON INTRON HGVSc HGVSp cDNA_position CDS_position Protein_position Amino_acids Codons Existing_variation DISTANCE STRAND FLAGS VARIANT_CLASS SYMBOL_SOURCE HGNC_ID CANONICAL TSL APPRIS CCDS ENSP SWISSPROT TREMBL UNIPARC GENE_PHENO SIFT PolyPhen DOMAINS AF AFR_AF AMR_AF EAS_AF EUR_AF SAS_AF AA_AF EA_AF ExAC_AF ExAC_Adj_AF ExAC_AFR_AF ExAC_AMR_AF ExAC_EAS_AF ExAC_FIN_AF ExAC_NFE_AF ExAC_OTH_AF ExAC_SAS_AF MAX_AF MAX_AF_POPS CLIN_SIG SOMATIC PHENO PUBMED MOTIF_NAME MOTIF_POS HIGH_INF_POS MOTIF_SCORE_CHANGE SampleName IMPACT_rank chr4_55599321 vardict chr4 55599321 A TRUE 38.8 PASS 0/1 114 0.0702 0 106 8 27 78 1 7 TRUE missense_variant MODERATE KIT ENSG00000157404 Transcript ENST00000288135 protein_coding 17/21 NA NA NA 2544 2447 816 D/V gAc/gTc rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 NA 1 NA SNV HGNC 6342 YES NA NA CCDS3496.1 ENSP00000288135 P10721 Q8TCG9 UPI000003F17D 1 deleterious(0) probably_damaging(0.977) PROSITE_profiles:PS50011&amp;hmmpanther:PTHR24416&amp;hmmpanther:PTHR24416:SF46&amp;Pfam_domain:PF07714&amp;Gene3D:1.10.510.10&amp;PIRSF_domain:PIRSF000615&amp;SMART_domains:SM00219&amp;PIRSF_domain:PIRSF500951&amp;Superfamily_domains:SSF56112 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 NA NA NA NA NA SRX729580 3 chr4_55599321 vardict chr4 55599321 A TRUE 38.8 PASS 0/1 114 0.0702 0 106 8 27 78 1 7 TRUE missense_variant MODERATE KIT ENSG00000157404 Transcript ENST00000412167 protein_coding 17/21 NA NA NA 2532 2435 812 D/V gAc/gTc rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 NA 1 NA SNV HGNC 6342 NA NA CCDS47058.1 ENSP00000390987 P10721 Q8TCG9 UPI000006D0DC 1 deleterious(0) probably_damaging(0.961) PROSITE_profiles:PS50011&amp;hmmpanther:PTHR24416:SF46&amp;hmmpanther:PTHR24416&amp;Gene3D:1.10.510.10&amp;Pfam_domain:PF07714&amp;SMART_domains:SM00219&amp;PIRSF_domain:PIRSF000615&amp;PIRSF_domain:PIRSF500951&amp;Superfamily_domains:SSF56112 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 NA NA NA NA NA SRX729580 3 chr4_55599321 vardict chr4 55599321 A TRUE 38.8 PASS 0/1 114 0.0702 0 106 8 27 78 1 7 TRUE non_coding_transcript_exon_variant MODIFIER KIT ENSG00000157404 Transcript ENST00000512959 retained_intron 4/4 NA NA NA 500 NA NA rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 NA 1 NA SNV HGNC 6342 NA NA 1 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 NA NA NA NA NA SRX729580 4 # Read and parse with varikondo vardict.varik &lt;- varikondo::parse_vcf_output(file.path(here(),&quot;data/test-variants/vardict/regions_caller_defaults/annotated_variants/SRX729580_germline_annotated.vcf&quot;), caller = &quot;vardict&quot;,vep = TRUE) dim(vardict.varik) ## [1] 3 85 knitr::kable(vardict.varik) Location caller chrom pos end ref alt qual filter genotype tot_depth VAF ref_depth alt_depth ref_forw ref_rev alt_forw alt_rev width ADJVAF_ADJ_indels SampleName Allele Consequence IMPACT SYMBOL Gene Feature_type Feature BIOTYPE EXON INTRON HGVSc HGVSp cDNA_position CDS_position Protein_position Amino_acids Codons Existing_variation DISTANCE STRAND FLAGS VARIANT_CLASS SYMBOL_SOURCE HGNC_ID CANONICAL TSL APPRIS CCDS ENSP SWISSPROT TREMBL UNIPARC GENE_PHENO SIFT PolyPhen DOMAINS AF AFR_AF AMR_AF EAS_AF EUR_AF SAS_AF AA_AF EA_AF ExAC_AF ExAC_Adj_AF ExAC_AFR_AF ExAC_AMR_AF ExAC_EAS_AF ExAC_FIN_AF ExAC_NFE_AF ExAC_OTH_AF ExAC_SAS_AF MAX_AF MAX_AF_POPS CLIN_SIG SOMATIC PHENO PUBMED MOTIF_NAME MOTIF_POS HIGH_INF_POS MOTIF_SCORE_CHANGE IMPACT_rank chr4_55599321 vardict chr4 55599321 55599321 A T 38.8 PASS 0/1 114 0.0702 106 8 27 78 1 7 1 0 SRX729580_germline_annotated.vcf.bgz T missense_variant MODERATE KIT ENSG00000157404 Transcript ENST00000288135 protein_coding 17/21 2544 2447 816 D/V gAc/gTc rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 1 SNV HGNC 6342 YES CCDS3496.1 ENSP00000288135 P10721 Q8TCG9 UPI000003F17D 1 deleterious(0) probably_damaging(0.977) PROSITE_profiles:PS50011&amp;hmmpanther:PTHR24416&amp;hmmpanther:PTHR24416:SF46&amp;Pfam_domain:PF07714&amp;Gene3D:1.10.510.10&amp;PIRSF_domain:PIRSF000615&amp;SMART_domains:SM00219&amp;PIRSF_domain:PIRSF500951&amp;Superfamily_domains:SSF56112 pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 3 chr4_55599321 vardict chr4 55599321 55599321 A T 38.8 PASS 0/1 114 0.0702 106 8 27 78 1 7 1 0 SRX729580_germline_annotated.vcf.bgz T missense_variant MODERATE KIT ENSG00000157404 Transcript ENST00000412167 protein_coding 17/21 2532 2435 812 D/V gAc/gTc rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 1 SNV HGNC 6342 CCDS47058.1 ENSP00000390987 P10721 Q8TCG9 UPI000006D0DC 1 deleterious(0) probably_damaging(0.961) PROSITE_profiles:PS50011&amp;hmmpanther:PTHR24416:SF46&amp;hmmpanther:PTHR24416&amp;Gene3D:1.10.510.10&amp;Pfam_domain:PF07714&amp;SMART_domains:SM00219&amp;PIRSF_domain:PIRSF000615&amp;PIRSF_domain:PIRSF500951&amp;Superfamily_domains:SSF56112 pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 3 chr4_55599321 vardict chr4 55599321 55599321 A T 38.8 PASS 0/1 114 0.0702 106 8 27 78 1 7 1 0 SRX729580_germline_annotated.vcf.bgz T non_coding_transcript_exon_variant MODIFIER KIT ENSG00000157404 Transcript ENST00000512959 retained_intron 4/4 500 rs121913507&amp;CM952169&amp;KinMutBase_KIT_DNA:g.76140A&gt;T&amp;COSM12711&amp;COSM1314&amp;COSM24675 1 SNV HGNC 6342 1 pathogenic 0&amp;0&amp;0&amp;1&amp;1&amp;1 1&amp;1&amp;0&amp;1&amp;1&amp;1 1 References "],
["ch-tcga-down.html", "4 TCGA-LAML downsampling", " 4 TCGA-LAML downsampling 1.24 is taken as the ratio between the mean proportion of mapped reads in the Leucegene and the TCGA-LAML cohorts. This is discussed in the Methods paper. TCGA-LAML-multiqc_samtools_flagstat.txt was created using the samtools flagstat function. library(tidyverse) tcga &lt;- read.delim(&quot;data/TCGA-LAML-multiqc_samtools_flagstat.txt&quot;) info_tcga &lt;- subset(tcga,select=c(&quot;Sample&quot;,&quot;mapped_passed&quot;,&quot;total_passed&quot;,&quot;total_failed&quot;,&quot;secondary_passed&quot;,&quot;secondary_failed&quot;)) %&gt;% mutate(total_reads = (total_failed - secondary_failed) + (total_passed - secondary_passed), prop_mapped_passed = (mapped_passed - secondary_passed)/total_reads) info_tcga$total_passed_no_secondary &lt;- info_tcga$mapped_passed - info_tcga$secondary_passed summary(info_tcga$total_passed_no_secondary/2/1000000) # divide by two as flagstats reports the number of reads not fragments ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 36.70 54.98 58.68 57.72 61.53 69.62 tot_reads &lt;- info_tcga %&gt;% dplyr::select(Sample,total_reads) %&gt;% # total_reads is the sum of both Reads1 and Reads2 mutate(Prop40 = round((80000000/total_reads)*1.24,2)) %&gt;% separate(Sample, into = c(&quot;Name&quot;),sep=&quot;[.]&quot;) %&gt;% # 80000000 = target number of reads, double the fragments dplyr::select(Name,Prop40,total_reads) write_csv(tot_reads,&quot;data/AdditionalTables/TableS4-downsampling-proportion-TCGA-LAML.csv&quot;) Script to downsample at a certain proportion module load picard-tools/2.9.4 module load samtools/1.6 DownsampleSam I=input.bam O=downsampled_output.bam PROBABILITY=sample_specific_prop RANDOM_SEED=200 # Used to check the size of the doensampled file samtools flagstat downsampled_output.bam "],
["ch-deploy.html", "5 Gitbook publication and deployment", " 5 Gitbook publication and deployment The gitbook was published with bookdown(Xie 2016) and deployed using Netlify. References "],
["ch-refer.html", "6 References", " 6 References "]
]
